// package utility

// //"github.com/sharin-sushi/0016go_next_relation/internal/utility"

// import (
// 	// "database/sql"
// 	"fmt"
// 	"os"

// 	// "time"

// 	_ "github.com/go-sql-driver/mysql"
// 	"gorm.io/driver/mysql"
// 	"gorm.io/gorm"
// )

// // var DbGo *sql.DB
// var Db *gorm.DB

// // init packageがimportされたときに１度だけ自動で呼び出される
// func init() {
// 	user := os.Getenv("MYSQL_USER")
// 	pw := os.Getenv("MYSQL_PASSWORD")
// 	db_name := os.Getenv("MYSQL_DATABASE")

// 	var path string = fmt.Sprintf("%s:%s@tcp(localhost:3306)/%s?charset=utf8&parseTime=true", user, pw, db_name)
// 	// sqlへ接続するための文字列の生成
// 	var err error

// 	// fmt.Printf("%s\n%s\n", path, err)

// 	Db, err = gorm.Open(mysql.Open(path), &gorm.Config{})
// 	if err != nil {
// 		panic("failed to connect database")

// 	}
// 	if Db == nil {
// 		panic("failed to connect database")

// 	} //このif Db文消したい意味的に重複してる

// 	fmt.Printf("path=%s\n, err=%s\n", path, err)

// 	// checkConnect(1)

// 	// defer Db.Close()
// }

// // user := "ユーザー名"
// // password := "パスワード"
// // host := "ホスト名"
// // port := "ポート番号"
// // database := "データベース名"

// // func checkConnect(count uint) {
// // 	var err error
// // 	if err = DbGo.Ping(); err != nil {
// // 		time.Sleep(time.Second * 2)
// // 		count--
// // 		fmt.Printf("retry... count:%v\n", count)
// // 		if count > 0 {
// // 			checkConnect(count)
// // 		} else {
// // 			fmt.Println("Connection retries exhausted err")
// // 			fmt.Printf("err=%s", err)
// // 			return
// // 		}
// // 	} else {
// // 		fmt.Println("db connected!!")
// // 	}
// // } //
