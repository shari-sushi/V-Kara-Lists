package crud

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/sharin-sushi/0016go_next_relation/internal/utility"
)

type karaokelist struct {
	Unique_id int    `json:"unique_id"`
	Movie     string `json:"movie"`
	Url       string `json:"url"`
	SingStart string `json:"singStart"`
	Song      string `json:"song"`
}

func Index(w http.ResponseWriter, r *http.Request) {
	rows, err := utility.Db.Query("SELECT * FROM karaokelist")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var items []karaokelist //長さと容量が0のスライス、karaokelist型
	fmt.Printf("itemの中身(空であることを期待)%v\n", items)
	for rows.Next() {
		var k karaokelist
		fmt.Printf("k定義直後の中身%v\n", k) // k は 0および空(nil?)
		if err := rows.Scan(&k.Unique_id, &k.Movie, &k.Url, &k.SingStart, &k.Song); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		items = append(items, k) // itmemsスライスにkを追加する
		fmt.Printf("append直後のitemの中身は%v\n", items)
		fmt.Printf("append直後のkの中身%v\n", k) //kには全データが入ってる
		fmt.Printf("\n")
	}

	if err := rows.Err(); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	if err := json.NewEncoder(w).Encode(items); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
	fmt.Printf("最終的なitemの中身は%v\n", items)
	fmt.Println(w)
}

func Show(w http.ResponseWriter, r *http.Request) {
	unique_id := r.URL.Query().Get("Unique_id")
	row := utility.Db.QueryRow("SELECT * FROM karaokelist WHERE unique_id = ?", unique_id)
	fmt.Printf("showにてQueryRowで取得したidは%s。rowデータは%s\n", unique_id, row) //この時点ではnill

	kList := karaokelist{}
	err := row.Scan(&kList.Unique_id, &kList.Movie, &kList.Url, &kList.SingStart, &kList.Song)

	if err != nil {
		if err == sql.ErrNoRows {
			http.NotFound(w, r)
			return
		} else {
			http.Error(w, http.StatusText(500), 500)
			return
		}
	}

	json.NewEncoder(w).Encode(kList)
	fmt.Printf("Enode後showにて取得したidは%s。kListは%v\n※", unique_id, kList)
}

func Create(w http.ResponseWriter, r *http.Request) {
	// kList := karaokelist{}
	if r.Method == "GET" {

		fmt.Println("GET受信")
	} else if r.Method == "POST" {
		var kList karaokelist
		err := json.NewDecoder(r.Body).Decode(&kList)
		fmt.Printf("err=%v\n", err)
		//r.BodyがHTTPリクエストのボディを参照し、&kListに格納
		fmt.Printf("r.Bodyの処理完了し、kList=%v", kList)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		fmt.Printf("Editのpostが通り、errはnil\n")

		fmt.Printf("movie=%v, url=%v, singStart=%v, song=%v \n", kList.Movie, kList.Url, kList.SingStart, kList.Song)

		ctx := context.Background()
		result, err := utility.Db.ExecContext(ctx, "INSERT INTO KaraokeList(movie, url, singStart, song) VALUES(?,?,?,?)", kList.Movie, kList.Url, kList.SingStart, kList.Song)
		fmt.Printf("result=%s", result)
		fmt.Printf("ctx=%s", ctx)
		if err != nil {
			// result = utility.Db.Rollback() //エラー起きたら戻してくれる
			log.Fatal(err)
		}
		fmt.Println("err=nill")

		// http.Redirect(w, r, "/", 301)
		fmt.Printf("POSTリクエストです")
	} else {
		fmt.Printf("GETリクエストでもPOSTリクエストではありません")
	}
}

func Edit(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		unique_id := r.URL.Query().Get("Unique_id")
		//urlのuniqueid=の値を取得

		// ↓の手打ち selected, err := utility.Db.Query("SELECT * FROM KaraokeList WHERE unique_id=1")
		selected, err := utility.Db.Query("SELECT * FROM KaraokeList WHERE unique_id=?", unique_id)
		if err != nil {
			panic(err.Error())
		}

		kList := karaokelist{}
		for selected.Next() {
			err = selected.Scan(&kList.Unique_id, &kList.Movie, &kList.Url, &kList.SingStart, &kList.Song)
			if err != nil {
				panic(err.Error())
			}
			fmt.Printf("selectした値: %v", selected)
		}
		selected.Close() //メモリ解放

		json.NewEncoder(w).Encode(kList)
		fmt.Printf("Editにて取得したidは%s。rowデータは%v\n※Encode後\n", unique_id, kList)

	} else if r.Method == "POST" {
		var kList karaokelist
		err := json.NewDecoder(r.Body).Decode(&kList)
		fmt.Printf("err=%v\n", err)
		//r.BodyがHTTPリクエストのボディを参照し、&kListに格納
		fmt.Printf("r.Bodyの処理完了し、kList=%v", kList)
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		fmt.Printf("Editのpostが通り、errはnil\n")

		fmt.Printf("unique_id=%v, movie=%v, url=%v, singStart=%v, song=%v \n", kList.Unique_id, kList.Movie, kList.Url, kList.SingStart, kList.Song)

		ctx := context.Background()
		result, err := utility.Db.ExecContext(ctx, "UPDATE KaraokeList SET movie=?, url=?, singStart=?, song=? WHERE unique_id=?", kList.Movie, kList.Url, kList.SingStart, kList.Song, kList.Unique_id)
		fmt.Printf("result=%s", result)
		fmt.Printf("ctx=%s", ctx)
		if err != nil {
			// result = utility.Db.Rollback() //エラー起きたら戻してくれる
			log.Fatal(err)
		}
		fmt.Println("err=nill")

		// http.Redirect(w, r, "/", 301)
		fmt.Printf("POSTリクエストです")
	} else {
		fmt.Printf("GETリクエストでもPOSTリクエストではありません")
	}
}

func Delete(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		unique_id := r.URL.Query().Get("Unique_id")
		//urlのuniqueid=の値を取得

		// ↓の手打ち selected, err := utility.Db.Query("SELECT * FROM KaraokeList WHERE unique_id=1")
		selected, err := utility.Db.Query("SELECT * FROM KaraokeList WHERE unique_id=?", unique_id)
		if err != nil {
			panic(err.Error())
		}
		// updata処理
		kList := karaokelist{}
		for selected.Next() {
			err = selected.Scan(&kList.Unique_id, &kList.Movie, &kList.Url, &kList.SingStart, &kList.Song)
			if err != nil {
				panic(err.Error())
			}
			fmt.Printf("selectした値: %v", selected)
		}
		selected.Close() //メモリ解放

		json.NewEncoder(w).Encode(kList)
		fmt.Printf("DELETEにて取得したidは%s。rowデータは%v\n※Encode後\n", unique_id, kList)

	} else if r.Method == "DELETE" {
		Unique_id := r.FormValue("Unique_id")
		delete, err := utility.Db.Prepare("DELETE FROM KaraokeList WHERE unique_id=?")
		if err != nil {
			panic(err.Error())
		}
		delete.Exec(Unique_id)
		//検索結果を取得しない場合（create, insert, update, delete）
		http.Redirect(w, r, "/", 301)
	}
}

// SQLのロールバック ROLLBACK;
// なお、コミットcommit; 後は不可能
